{"ast":null,"code":"var _jsxFileName = \"/home/mindbowser/Firebase-Demo/firebase-demo/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../firebase\";\nimport { collection, query, where, onSnapshot, addDoc, Timestamp, orderBy, setDoc, doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\nimport User from \"../components/User\";\nimport MessageForm from \"../components/MessageForm\";\nimport Message from \"../components/Message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [msgs, setMsgs] = useState([]);\n  const user1 = auth.currentUser.uid;\n  useEffect(() => {\n    const usersRef = collection(db, \"users\"); // create query object\n\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1])); // execute query\n\n    const unsub = onSnapshot(q, querySnapshot => {\n      let users = [];\n      querySnapshot.forEach(doc => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []);\n\n  const selectUser = async user => {\n    setChat(user);\n    const user2 = user.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n    onSnapshot(q, querySnapshot => {\n      let msgs = [];\n      querySnapshot.forEach(doc => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    }); // get last message b/w logged in user and selected user\n\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id)); // if last message exists and message is from selected user\n\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), {\n        unread: false\n      });\n    }\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const user2 = chat.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n    let url;\n\n    if (img) {\n      const imgRef = ref(storage, `images/${new Date().getTime()} - ${img.name}`);\n      const snap = await uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\"\n    });\n    await setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true\n    });\n    setText(\"\");\n    setImg(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"users_container\",\n      children: users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        user: user,\n        selectUser: selectUser,\n        user1: user1,\n        chat: chat\n      }, user.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages_container\",\n      children: chat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages_user\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: chat.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: msgs.length ? msgs.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n            msg: msg,\n            user1: user1\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MessageForm, {\n          handleSubmit: handleSubmit,\n          text: text,\n          setText: setText,\n          setImg: setImg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"no_conv\",\n        children: \"Select a user to start conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"EI6vydb5qYesP2uRUERqzpssspU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/mindbowser/Firebase-Demo/firebase-demo/src/pages/Home.js"],"names":["React","useEffect","useState","db","auth","storage","collection","query","where","onSnapshot","addDoc","Timestamp","orderBy","setDoc","doc","getDoc","updateDoc","ref","getDownloadURL","uploadBytes","User","MessageForm","Message","Home","users","setUsers","chat","setChat","text","setText","img","setImg","msgs","setMsgs","user1","currentUser","uid","usersRef","q","unsub","querySnapshot","forEach","push","data","selectUser","user","user2","id","msgsRef","docSnap","from","unread","handleSubmit","e","preventDefault","url","imgRef","Date","getTime","name","snap","dlUrl","fullPath","to","createdAt","fromDate","media","map","length","msg","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../firebase\";\nimport {\n  collection,\n  query,\n  where,\n  onSnapshot,\n  addDoc,\n  Timestamp,\n  orderBy,\n  setDoc,\n  doc,\n  getDoc,\n  updateDoc,\n} from \"firebase/firestore\";\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\nimport User from \"../components/User\";\nimport MessageForm from \"../components/MessageForm\";\nimport Message from \"../components/Message\";\n\nconst Home = () => {\n  const [users, setUsers] = useState([]);\n  const [chat, setChat] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(\"\");\n  const [msgs, setMsgs] = useState([]);\n\n  const user1 = auth.currentUser.uid;\n\n  useEffect(() => {\n    const usersRef = collection(db, \"users\");\n    // create query object\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\n    // execute query\n    const unsub = onSnapshot(q, (querySnapshot) => {\n      let users = [];\n      querySnapshot.forEach((doc) => {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return () => unsub();\n  }, []);\n\n  const selectUser = async (user) => {\n    setChat(user);\n\n    const user2 = user.uid;\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n\n    onSnapshot(q, (querySnapshot) => {\n      let msgs = [];\n      querySnapshot.forEach((doc) => {\n        msgs.push(doc.data());\n      });\n      setMsgs(msgs);\n    });\n\n    // get last message b/w logged in user and selected user\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id));\n    // if last message exists and message is from selected user\n    if (docSnap.data() && docSnap.data().from !== user1) {\n      // update last message doc, set unread to false\n      await updateDoc(doc(db, \"lastMsg\", id), { unread: false });\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const user2 = chat.uid;\n\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\n\n    let url;\n    if (img) {\n      const imgRef = ref(\n        storage,\n        `images/${new Date().getTime()} - ${img.name}`\n      );\n      const snap = await uploadBytes(imgRef, img);\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\n      url = dlUrl;\n    }\n\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n    });\n\n    await setDoc(doc(db, \"lastMsg\", id), {\n      text,\n      from: user1,\n      to: user2,\n      createdAt: Timestamp.fromDate(new Date()),\n      media: url || \"\",\n      unread: true,\n    });\n\n    setText(\"\");\n    setImg(\"\");\n  };\n  return (\n    <div className=\"home_container\">\n      <div className=\"users_container\">\n        {users.map((user) => (\n          <User\n            key={user.uid}\n            user={user}\n            selectUser={selectUser}\n            user1={user1}\n            chat={chat}\n          />\n        ))}\n      </div>\n      <div className=\"messages_container\">\n        {chat ? (\n          <>\n            <div className=\"messages_user\">\n              <h3>{chat.name}</h3>\n            </div>\n            <div className=\"messages\">\n              {msgs.length\n                ? msgs.map((msg, i) => (\n                    <Message key={i} msg={msg} user1={user1} />\n                  ))\n                : null}\n            </div>\n            <MessageForm\n              handleSubmit={handleSubmit}\n              text={text}\n              setText={setText}\n              setImg={setImg}\n            />\n          </>\n        ) : (\n          <h3 className=\"no_conv\">Select a user to start conversation</h3>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}